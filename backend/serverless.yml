org: patrickha55
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-todo-images-phatht9-2022-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo Api
        description: An API for managing todo items
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer:
            name: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}"

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer:
            name: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo item
            description: Create a new todo item
            requestModels:
              "application/json": CreateTodoRequest
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer:
            name: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing todo item
            description: Update an existing todo item
            requestModels:
              "application/json": UpdateTodoRequest
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"

  UpdateTodoAttachment:
    handler: src/lambda/http/updateTodoAttachment.handler
    events:
      - http:
          method: put
          path: todos/{todoId}/attachment
          cors: true
          authorizer:
            name: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer:
            name: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer:
            name: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:GetObject"
        Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"

resources:
  Resources:
    GatewayResourceDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        Name: request-body-validator
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:provider.environment.TODOS_TABLE}"
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:provider.environment.ATTACHMENT_S3_BUCKET}"
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket
